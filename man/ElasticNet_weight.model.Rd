% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/berm.R
\name{ElasticNet_weight.model}
\alias{ElasticNet_weight.model}
\title{Weighted Elastic Net Model}
\usage{
ElasticNet_weight.model(
  x,
  y,
  lambda_grid = 10^seq(2, -3, by = -0.1),
  alpha_grid = seq(1, 0, length.out = 20),
  standardize = TRUE,
  nfold = 10,
  penalty.factor
)
}
\arguments{
\item{x}{A matrix or data frame of predictor variables where rows are observations
and columns are variables.}

\item{y}{A vector of the response variable.}

\item{lambda_grid}{A numeric vector of lambda values to be tested.}

\item{alpha_grid}{A numeric vector of alpha values to be tested.}

\item{standardize}{Logical, indicating whether the predictor variables should
be standardized before fitting the model.}

\item{nfold}{The number of folds to be used in cross-validation. This parameter
determines how the data is split during the cross-validation process.}

\item{penalty.factor}{A numeric vector or a single number that specifies the penalty
multiplier for each predictor variable.}
}
\value{
A list containing several components:
- 'cvres': A data frame containing the cross-validation results.
- 'pars': The best tuning parameters (lambda and alpha) selected based on
cross-validation.
- 'coef': A data frame of coefficient estimates at the best lambda and alpha,
adjusted for the penalty factor.
- 'intercept': The intercept term from the model at the best lambda.
- 'cvmodels': The full cross-validated \code{train} object including all models
fitted during the tuning process.
- 'finalmodel': The final model object with parameters set at the best lambda
and alpha.
}
\description{
This function extends the elastic net model by allowing for differential
penalization of variables through the \code{penalty.factor} parameter. It fits
the model using cross-validation to select the best lambda and alpha values,
incorporating these weights.
}
